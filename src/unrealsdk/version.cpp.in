#include "unrealsdk/pch.h"
#include "unrealsdk/version.h"

namespace unrealsdk {

namespace {

// We expect CMake to modify this file (adding info about git).
// Note clang format likes to insert a space before the second '@' in each substitution, so we need
//  to keep turning it off

// clang-format off
[[maybe_unused]] const std::string GIT_HASH = "@GIT_HEAD_SHA1@";
[[maybe_unused]] const constexpr bool GIT_DIRTY = @GIT_IS_DIRTY@;
// clang-format on

}  // namespace

#ifdef UNREALSDK_EXPORTING
uint32_t get_version(void) {
    // NOLINTNEXTLINE(readability-magic-numbers)
    return (VERSION_MAJOR & 0xFF) << 16 | (VERSION_MINOR & 0xFF) << 8 | (VERSION_PATCH & 0xFF);
}
#endif

namespace {

#ifndef UNREALSDK_IMPORTING
const constexpr auto GIT_HASH_CHARS = 8;
const std::string VERSION_STR = unrealsdk::fmt::format("unrealsdk v{}.{}.{} ({}{})",
                                                       VERSION_MAJOR,
                                                       VERSION_MINOR,
                                                       VERSION_PATCH,
                                                       GIT_HASH.substr(0, GIT_HASH_CHARS),
                                                       GIT_DIRTY ? ", dirty" : "");
#endif
}  // namespace

#ifdef UNREALSDK_SHARED
UNREALSDK_CAPI [[nodiscard]] const char* get_version_cstr(void) UNREALSDK_CAPI_SUFFIX;
#endif
#ifdef UNREALSDK_IMPORTING
const std::string& get_version_string(void) {
    // NOLINTNEXTLINE(readability-identifier-naming)
    static const std::string VERSION_STR = get_version_cstr();
    return VERSION_STR;
}
#else
const std::string& get_version_string(void) {
    return VERSION_STR;
}
#endif
#ifdef UNREALSDK_EXPORTING
UNREALSDK_CAPI [[nodiscard]] const char* get_version_cstr(void) UNREALSDK_CAPI_SUFFIX {
    return VERSION_STR.data();
}
#endif

}  // namespace unrealsdk
