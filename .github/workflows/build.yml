name: CI

on: [
  push,
  pull_request,
  workflow_dispatch
]

env:
  # Important to pin the clang version, cause we also use it for linting
  CLANG_VERSION: 16
  CLANG_TIDY_JOBS: 4
  # Since we use rather new c++ features, we need a rather new version of MinGW
  # LLVM MinGW seems to be the newest prebuild binaries around
  LLVM_MINGW_VERSION: llvm-mingw-20230320-msvcrt-ubuntu-18.04-x86_64
  LLVM_MINGW_DOWNLOAD: https://github.com/mstorsjo/llvm-mingw/releases/download/20230320/llvm-mingw-20230320-msvcrt-ubuntu-18.04-x86_64.tar.xz

jobs:
  cache-clang:
    runs-on: windows-latest

    steps:
    - name: Cache Clang
      uses: actions/cache@v3
      id: cache-clang
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        lookup-only: true

    - name: Setup Clang
      if: steps.cache-clang.outputs.cache-hit != 'true'
      uses: egor-tensin/setup-clang@v1
      with:
        version: ${{ env.CLANG_VERSION }}

# ==============================================================================

  build-windows:
    runs-on: windows-latest
    needs: cache-clang

    strategy:
      fail-fast: false
      matrix:
        preset: [
          "clang-ue3-x86-release",
          "clang-ue4-x64-release",
          "msvc-ue3-x86-release",
          "msvc-ue4-x64-release",
        ]

    steps:
    - name: Restore Clang Cache
      if: contains(matrix.preset, 'clang')
      uses: actions/cache/restore@v3
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    - name: Add MSVC to PATH
      if: contains(matrix.preset, 'msvc')
      uses: TheMrMilchmann/setup-msvc-dev@v2
      with:
        arch: ${{ fromJSON('["x86", "x64"]')[contains(matrix.preset, 'x64')] }}

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake . --preset ${{ matrix.preset }}

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake --build out/build/${{ matrix.preset }}

  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        preset: [
          "mingw-ue3-x86-release",
          "mingw-ue4-x64-release",
        ]

    steps:
    # It's not worth caching this because we lose the +x permission. It's recommended to tar the
    # files to avoid that... which just brings us right back to where we started.
    - name: Setup MinGW
      if: contains(matrix.preset, 'mingw')
      run: |
        wget -nv ${{ env.LLVM_MINGW_DOWNLOAD }}
        tar -xf ${{ env.LLVM_MINGW_VERSION }}.tar.xz -C ~/
        echo $(readlink -f ~/${{ env.LLVM_MINGW_VERSION }}/bin) >> $GITHUB_PATH

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake . --preset ${{ matrix.preset }}

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake --build out/build/${{ matrix.preset }}

# ==============================================================================

  clang-tidy:
    runs-on: windows-latest
    needs: cache-clang

    strategy:
      fail-fast: false
      matrix:
        preset: [
          "clang-ue3-x86-release",
          "clang-ue4-x64-release",
        ]

    steps:
    - name: Restore Clang Cache
      uses: actions/cache/restore@v3
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    # Needed for clang tidy to enable `-export-fixes`
    - name: Install pyyaml
      run: pip install pyyaml

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: cmake . --preset ${{ matrix.preset }} -DCMAKE_DISABLE_PRECOMPILE_HEADERS=On

    - name: Run clang-tidy
      shell: bash # To follow the shebang
      run: run-clang-tidy -j ${{ env.CLANG_TIDY_JOBS }} -p out/build/${{ matrix.preset }} -export-fixes clang-tidy-fixes.yml

    - name: Process clang-tidy warnings
      uses: asarium/clang-tidy-action@v1
      with:
        fixesFile: clang-tidy-fixes.yml

  clang-format:
    runs-on: windows-latest
    needs: cache-clang

    steps:
    - name: Restore Clang Cache
      uses: actions/cache/restore@v3
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run clang-format
      shell: bash # for find / command substitution
      run: clang-format -n -Werror $(find src -type f)

  spelling:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Check spelling
      uses: crate-ci/typos@master
